; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32822.0 

	TITLE	E:\kta\source\repos\simd_tools\test\base64_mmx.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_cs	DB	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123'
	DB	'456789+/=', 00H
	ORG $+6
_cs2	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	00H
	DB	00H
	DB	03fH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	03bH
	DB	03cH
	DB	03dH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	DB	0cH
	DB	0dH
	DB	0eH
	DB	0fH
	DB	010H
	DB	011H
	DB	012H
	DB	013H
	DB	014H
	DB	015H
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01aH
	DB	01bH
	DB	01cH
	DB	01dH
	DB	01eH
	DB	01fH
	DB	020H
	DB	021H
	DB	022H
	DB	023H
	DB	024H
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	02bH
	DB	02cH
	DB	02dH
	DB	02eH
	DB	02fH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
PUBLIC	_base64_12n_encode
PUBLIC	_base64_24n_encode
PUBLIC	_base64_48n_encode
PUBLIC	_base64_encode
PUBLIC	_base64_32n_decode
PUBLIC	_base64_decode
; Function compile flags: /Ogtpy
;	COMDAT _base64_decode
_TEXT	SEGMENT
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_out_rem$ = 20						; size = 4
_base64_decode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 225
	mov	eax, DWORD PTR _input_size$[esp-4]
	push	esi
	push	edi
	mov	edi, eax
	shr	edi, 2
; Line 226
	test	edi, edi
	je	SHORT $LN13@base64_dec
	test	al, 3
	jne	SHORT $LN13@base64_dec
	mov	ecx, 1
	jmp	SHORT $LN14@base64_dec
$LN13@base64_dec:
	xor	ecx, ecx
$LN14@base64_dec:
	sub	edi, ecx
; Line 198
	mov	ecx, DWORD PTR _src$[esp+4]
	test	ecx, ecx
	je	$LN32@base64_dec
	mov	esi, DWORD PTR _dst$[esp+4]
	test	esi, esi
	je	$LN32@base64_dec
	push	ebx
; Line 200
	mov	ebx, edi
	and	ebx, 1073741823				; 3fffffffH
; Line 202
	jbe	SHORT $LN17@base64_dec
; Line 228
	add	esi, 2
	lea	edx, DWORD PTR [ecx+2]
	npad	9
$LL18@base64_dec:
; Line 204
	movzx	eax, BYTE PTR [edx-2]
	lea	edx, DWORD PTR [edx+4]
	lea	esi, DWORD PTR [esi+3]
; Line 208
	movzx	ecx, BYTE PTR _cs2[eax]
	movzx	eax, BYTE PTR [edx-5]
; Line 211
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
; Line 213
	or	ecx, eax
	movzx	eax, BYTE PTR [edx-4]
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
	or	ecx, eax
	movzx	eax, BYTE PTR [edx-3]
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
	or	ecx, eax
; Line 215
	mov	eax, ecx
; Line 217
	mov	BYTE PTR [esi-3], cl
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi-5], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [esi-4], al
	sub	ebx, 1
	jne	SHORT $LL18@base64_dec
	mov	eax, DWORD PTR _input_size$[esp+8]
$LN17@base64_dec:
; Line 220
	lea	ecx, DWORD PTR [edi*4]
; Line 230
	xor	ebx, ebx
; Line 231
	cmp	ecx, eax
	jae	SHORT $LN10@base64_dec
; Line 233
	mov	ebx, DWORD PTR _src$[esp+8]
	xor	edx, edx
	push	ebp
; Line 235
	mov	ebp, DWORD PTR _input_size$[esp+12]
	xor	esi, esi
$LL4@base64_dec:
; Line 237
	movzx	eax, BYTE PTR [ecx+ebx]
; Line 238
	cmp	eax, 61					; 0000003dH
	je	SHORT $LN24@base64_dec
; Line 242
	movzx	eax, BYTE PTR _cs2[eax]
	inc	ecx
	shl	edx, 6
; Line 243
	inc	esi
	or	edx, eax
	cmp	ecx, ebp
	jb	SHORT $LL4@base64_dec
$LN24@base64_dec:
; Line 248
	lea	eax, DWORD PTR [esi+esi*2]
	mov	ecx, 24					; 00000018H
	add	eax, eax
	lea	edi, DWORD PTR [edi+edi*2]
	sub	ecx, eax
; Line 250
	mov	ebx, 0
	shl	edx, cl
	pop	ebp
	test	esi, esi
	jle	SHORT $LN10@base64_dec
; Line 252
	mov	ecx, DWORD PTR _dst$[esp+8]
	mov	eax, edx
	shr	eax, 16					; 00000010H
; Line 253
	mov	ebx, 1
	mov	BYTE PTR [edi+ecx], al
; Line 255
	cmp	esi, ebx
	jle	SHORT $LN9@base64_dec
; Line 257
	mov	eax, edx
	shr	eax, 8
; Line 258
	inc	ebx
	mov	BYTE PTR [edi+ecx+1], al
$LN9@base64_dec:
; Line 260
	cmp	esi, 2
	jle	SHORT $LN10@base64_dec
; Line 262
	mov	BYTE PTR [edi+ecx+2], dl
; Line 263
	inc	ebx
$LN10@base64_dec:
; Line 267
	mov	eax, DWORD PTR _out_rem$[esp+8]
	test	eax, eax
	je	SHORT $LN11@base64_dec
	mov	DWORD PTR [eax], ebx
$LN11@base64_dec:
; Line 269
	pop	ebx
	pop	edi
	mov	eax, 1
; Line 270
	pop	esi
	ret	0
$LN32@base64_dec:
	pop	edi
; Line 228
	xor	eax, eax
; Line 270
	pop	esi
	ret	0
_base64_decode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _base64_32n_decode
_TEXT	SEGMENT
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_base64_32n_decode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 198
	mov	edx, DWORD PTR _src$[esp-4]
	push	esi
	test	edx, edx
	je	SHORT $LN6@base64_32n
	mov	esi, DWORD PTR _dst$[esp]
	test	esi, esi
	je	SHORT $LN6@base64_32n
; Line 200
	push	edi
	mov	edi, DWORD PTR _input_size$[esp+4]
	shr	edi, 2
; Line 202
	test	edi, edi
	je	SHORT $LN3@base64_32n
; Line 200
	add	esi, 2
	add	edx, 2
$LL4@base64_32n:
; Line 204
	movzx	eax, BYTE PTR [edx-2]
	lea	edx, DWORD PTR [edx+4]
	lea	esi, DWORD PTR [esi+3]
; Line 208
	movzx	ecx, BYTE PTR _cs2[eax]
	movzx	eax, BYTE PTR [edx-5]
; Line 211
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
; Line 213
	or	ecx, eax
	movzx	eax, BYTE PTR [edx-4]
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
	or	ecx, eax
	movzx	eax, BYTE PTR [edx-3]
	shl	ecx, 6
	movzx	eax, BYTE PTR _cs2[eax]
	or	ecx, eax
; Line 215
	mov	eax, ecx
; Line 217
	mov	BYTE PTR [esi-3], cl
	shr	eax, 16					; 00000010H
	mov	BYTE PTR [esi-5], al
	mov	eax, ecx
	shr	eax, 8
	mov	BYTE PTR [esi-4], al
	sub	edi, 1
	jne	SHORT $LL4@base64_32n
$LN3@base64_32n:
; Line 220
	pop	edi
	mov	eax, 1
	pop	esi
; Line 221
	ret	0
$LN6@base64_32n:
; Line 198
	xor	eax, eax
	pop	esi
; Line 221
	ret	0
_base64_32n_decode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _base64_encode
_TEXT	SEGMENT
_units$1$ = -16						; size = 4
_dst_base$1$ = -12					; size = 4
_src_base$1$ = -8					; size = 4
tv877 = -4						; size = 4
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_base64_encode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 146
	sub	esp, 16					; 00000010H
	push	ebx
; Line 147
	mov	ebx, DWORD PTR _input_size$[esp+16]
	push	ebp
	mov	ebp, DWORD PTR _src$[esp+20]
	push	edi
	mov	edi, DWORD PTR _dst$[esp+24]
	push	edi
	push	ebp
	push	ebx
	call	_base64_12n_encode
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN7@base64_enc
; Line 148
	test	ebp, ebp
	je	$LN7@base64_enc
	test	edi, edi
	je	$LN7@base64_enc
; Line 150
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebx
	push	esi
	mov	esi, edx
; Line 155
	mov	eax, -1431655765			; aaaaaaabH
	shr	esi, 3
	lea	ecx, DWORD PTR [esi+esi*2]
	shl	esi, 4
	shl	ecx, 2
	sub	ebx, ecx
	mov	DWORD PTR _src_base$1$[esp+32], ecx
	mul	ebx
	mov	DWORD PTR _dst_base$1$[esp+32], esi
	mov	eax, edx
	shr	eax, 1
	mov	DWORD PTR _units$1$[esp+32], eax
; Line 156
	lea	edx, DWORD PTR [eax+eax*2]
	sub	ebx, edx
	mov	DWORD PTR tv877[esp+32], edx
; Line 158
	test	eax, eax
	je	$LN3@base64_enc
; Line 150
	lea	edx, DWORD PTR [edi+2]
	mov	edi, eax
	add	edx, esi
	lea	esi, DWORD PTR [ebp+2]
	add	esi, ecx
$LL4@base64_enc:
; Line 160
	movzx	ecx, BYTE PTR [esi-2]
	lea	esi, DWORD PTR [esi+3]
; Line 161
	movzx	eax, BYTE PTR [esi-4]
	lea	edx, DWORD PTR [edx+4]
; Line 162
	shl	ecx, 8
	or	ecx, eax
	movzx	eax, BYTE PTR [esi-3]
	shl	ecx, 8
	or	ecx, eax
; Line 164
	mov	eax, ecx
	shr	eax, 18					; 00000012H
	movzx	eax, BYTE PTR _cs[eax]
	mov	BYTE PTR [edx-6], al
; Line 165
	mov	eax, ecx
	shr	eax, 12					; 0000000cH
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR _cs[eax]
	mov	BYTE PTR [edx-5], al
; Line 166
	mov	eax, ecx
	shr	eax, 6
; Line 167
	and	ecx, 63					; 0000003fH
	and	eax, 63					; 0000003fH
	movzx	eax, BYTE PTR _cs[eax]
	mov	BYTE PTR [edx-4], al
	movzx	eax, BYTE PTR _cs[ecx]
	mov	BYTE PTR [edx-3], al
	sub	edi, 1
	jne	SHORT $LL4@base64_enc
	mov	edi, DWORD PTR _dst$[esp+28]
	mov	esi, DWORD PTR _dst_base$1$[esp+32]
	mov	eax, DWORD PTR _units$1$[esp+32]
	mov	ecx, DWORD PTR _src_base$1$[esp+32]
	mov	edx, DWORD PTR tv877[esp+32]
$LN3@base64_enc:
; Line 172
	cmp	ebx, 1
	jne	SHORT $LN8@base64_enc
; Line 174
	lea	eax, DWORD PTR [edx+ecx]
	movzx	ecx, BYTE PTR [eax+ebp]
; Line 176
	mov	eax, DWORD PTR _units$1$[esp+32]
	lea	edx, DWORD PTR [esi+eax*4]
	mov	eax, ecx
	shr	eax, 2
	add	edx, edi
; Line 177
	and	ecx, 3
	shl	ecx, 4
; Line 192
	pop	esi
	movzx	eax, BYTE PTR _cs[eax]
	mov	BYTE PTR [edx], al
	movzx	eax, BYTE PTR _cs[ecx]
	pop	edi
	mov	BYTE PTR [edx+1], al
	mov	eax, ebx
; Line 193
	pop	ebp
	mov	WORD PTR [edx+2], 15677			; 00003d3dH
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
$LN8@base64_enc:
; Line 181
	cmp	ebx, 2
	jne	SHORT $LN10@base64_enc
; Line 186
	lea	eax, DWORD PTR [esi+eax*4]
; Line 189
	mov	BYTE PTR [eax+edi], 61			; 0000003dH
$LN10@base64_enc:
; Line 192
	pop	esi
	pop	edi
; Line 193
	pop	ebp
	mov	eax, 1
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
$LN7@base64_enc:
	pop	edi
	pop	ebp
	xor	eax, eax
	pop	ebx
	add	esp, 16					; 00000010H
	ret	0
_base64_encode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _base64_48n_encode
_TEXT	SEGMENT
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_base64_48n_encode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 143
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR _input_size$[esp-4]
	shr	edx, 5
	lea	ecx, DWORD PTR [edx+edx*2]
	shl	ecx, 4
; Line 139
	mov	eax, -1431655765			; aaaaaaabH
	mul	ecx
	shr	edx, 4
	lea	eax, DWORD PTR [edx+edx*2]
	shl	eax, 3
	mov	DWORD PTR _input_size$[esp-4], eax
	jmp	_base64_12n_encode
_base64_48n_encode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _base64_24n_encode
_TEXT	SEGMENT
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_base64_24n_encode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 139
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR _input_size$[esp-4]
	shr	edx, 4
	lea	eax, DWORD PTR [edx+edx*2]
	shl	eax, 3
	mov	DWORD PTR _input_size$[esp-4], eax
	jmp	_base64_12n_encode
_base64_24n_encode ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _base64_12n_encode
_TEXT	SEGMENT
tv797 = -84						; size = 4
tv796 = -80						; size = 4
_units$1$ = -76						; size = 4
tv831 = -72						; size = 8
tv828 = -72						; size = 8
_unit2$1$ = -72						; size = 4
tv824 = -64						; size = 8
tv821 = -56						; size = 8
tv818 = -48						; size = 8
tv815 = -40						; size = 8
tv812 = -32						; size = 8
tv809 = -24						; size = 8
tv806 = -16						; size = 8
tv803 = -8						; size = 8
_input_size$ = 8					; size = 4
_src$ = 12						; size = 4
_dst$ = 16						; size = 4
_base64_12n_encode PROC					; COMDAT
; File E:\kta\source\repos\simd_tools\src\x86\base64_mmx.c
; Line 40
	push	ebp
	mov	ebp, esp
	and	esp, -8					; fffffff8H
; Line 41
	mov	ecx, DWORD PTR _src$[ebp]
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	test	ecx, ecx
	je	$LN6@base64_12n
	mov	esi, DWORD PTR _dst$[ebp]
	test	esi, esi
	je	$LN6@base64_12n
; Line 43
	mov	eax, -1431655765			; aaaaaaabH
	mul	DWORD PTR _input_size$[ebp]
	shr	edx, 3
	mov	DWORD PTR _units$1$[esp+96], edx
; Line 48
	test	edx, edx
	je	$LN3@base64_12n
; Line 43
	mov	DWORD PTR tv831[esp+100], 48		; 00000030H
	lea	eax, DWORD PTR [esi+8]
	mov	DWORD PTR tv831[esp+96], 3
	movq	mm6, MMWORD PTR tv831[esp+96]
	mov	DWORD PTR tv797[esp+96], eax
	lea	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR tv828[esp+100], 15		; 0000000fH
	mov	DWORD PTR tv828[esp+96], 60		; 0000003cH
	movq	mm7, MMWORD PTR tv828[esp+96]
	mov	DWORD PTR tv796[esp+96], eax
$LL4@base64_12n:
; Line 52
	mov	edx, DWORD PTR [eax]
	mov	esi, DWORD PTR [eax-8]
; Line 59
	mov	ecx, esi
	mov	edi, DWORD PTR [eax-4]
	mov	eax, esi
	shl	ecx, 4
	shr	eax, 22					; 00000016H
	mov	DWORD PTR tv824[esp+96], eax
; Line 60
	mov	eax, esi
	mov	DWORD PTR tv824[esp+100], ecx
	mov	ecx, esi
	movq	mm4, MMWORD PTR tv824[esp+96]
	shr	ecx, 12					; 0000000cH
; Line 61
	pand	mm4, mm6
	shr	eax, 6
	mov	DWORD PTR tv821[esp+96], eax
; Line 68
	mov	eax, edi
	mov	DWORD PTR tv821[esp+100], ecx
	mov	ecx, esi
	movq	mm1, MMWORD PTR tv821[esp+96]
	shr	ecx, 20					; 00000014H
	movq	mm0, mm7
	pand	mm0, mm1
	shr	eax, 14					; 0000000eH
	mov	DWORD PTR tv818[esp+100], ecx
	por	mm4, mm0
	mov	DWORD PTR tv818[esp+96], eax
; Line 69
	mov	ecx, edi
	movq	mm5, MMWORD PTR tv818[esp+96]
	lea	eax, DWORD PTR [edi*4]
	shr	ecx, 4
; Line 70
	pand	mm5, mm6
	mov	DWORD PTR tv815[esp+96], eax
; Line 77
	mov	eax, edx
	mov	DWORD PTR tv815[esp+100], ecx
	mov	ecx, edi
	movq	mm1, MMWORD PTR tv815[esp+96]
	shr	eax, 6
	movq	mm0, mm7
	pand	mm0, mm1
	shr	ecx, 12					; 0000000cH
	mov	DWORD PTR tv812[esp+96], eax
	por	mm5, mm0
	mov	DWORD PTR tv812[esp+100], ecx
; Line 78
	mov	eax, edi
	movq	mm3, MMWORD PTR tv812[esp+96]
	mov	ecx, edi
	shr	eax, 22					; 00000016H
; Line 79
	pand	mm3, mm6
	shr	ecx, 28					; 0000001cH
	mov	DWORD PTR tv809[esp+96], eax
; Line 86
	mov	eax, edx
	mov	DWORD PTR tv809[esp+100], ecx
	mov	ecx, edx
	movq	mm1, MMWORD PTR tv809[esp+96]
	shr	ecx, 4
	movq	mm0, mm7
	pand	mm0, mm1
	shr	eax, 30					; 0000001eH
	por	mm3, mm0
	mov	DWORD PTR tv806[esp+96], eax
	mov	DWORD PTR tv806[esp+100], ecx
; Line 87
	mov	eax, edx
	movq	mm2, MMWORD PTR tv806[esp+96]
	mov	ecx, edx
	shr	ecx, 20					; 00000014H
; Line 88
	pand	mm2, mm6
	shr	eax, 14					; 0000000eH
	mov	DWORD PTR tv803[esp+96], eax
	mov	DWORD PTR tv803[esp+100], ecx
	movq	mm1, MMWORD PTR tv803[esp+96]
; Line 89
	movq	mm0, mm7
	mov	DWORD PTR _unit2$1$[esp+96], edx
	pand	mm0, mm1
; Line 90
	por	mm2, mm0
; Line 98
	movq	mm0, mm4
	psrlq	mm0, 32					; 00000020H
; Line 102
	movd	eax, mm0
	movq	mm0, mm4
; Line 108
	movsx	edx, BYTE PTR _cs[eax]
	movd	eax, mm0
; Line 109
	movsx	ecx, BYTE PTR _cs[eax]
	movq	mm0, mm5
	mov	eax, esi
	psrlq	mm0, 32					; 00000020H
	shr	eax, 16					; 00000010H
	and	eax, 63					; 0000003fH
; Line 110
	movsx	eax, BYTE PTR _cs[eax]
	shl	eax, 8
; Line 127
	or	ecx, eax
	mov	eax, esi
	shr	eax, 2
	and	eax, 63					; 0000003fH
	shl	ecx, 8
	or	edx, ecx
	shr	esi, 26					; 0000001aH
	shl	edx, 8
	movsx	eax, BYTE PTR _cs[eax]
	or	edx, eax
	mov	eax, DWORD PTR tv797[esp+96]
	mov	DWORD PTR [eax-8], edx
	movd	eax, mm0
	movq	mm0, mm5
	movsx	edx, BYTE PTR _cs[eax]
	movd	eax, mm0
	movq	mm0, mm3
	psrlq	mm0, 32					; 00000020H
	movsx	ecx, BYTE PTR _cs[eax]
	mov	eax, edi
	shr	eax, 8
	and	eax, 63					; 0000003fH
	shr	edi, 18					; 00000012H
	and	edi, 63					; 0000003fH
	movsx	eax, BYTE PTR _cs[eax]
	shl	eax, 8
; Line 128
	or	ecx, eax
	movsx	eax, BYTE PTR _cs[esi]
	shl	ecx, 8
	or	edx, ecx
	mov	esi, DWORD PTR _unit2$1$[esp+96]
	shl	edx, 8
	or	edx, eax
	mov	eax, DWORD PTR tv797[esp+96]
	mov	DWORD PTR [eax-4], edx
	movd	eax, mm0
	movq	mm0, mm3
	movsx	edx, BYTE PTR _cs[eax]
	movd	eax, mm0
	movq	mm0, mm2
	psrlq	mm0, 32					; 00000020H
	movsx	ecx, BYTE PTR _cs[eax]
	mov	eax, esi
	and	eax, 63					; 0000003fH
	movsx	eax, BYTE PTR _cs[eax]
	shl	eax, 8
; Line 129
	or	ecx, eax
	movsx	eax, BYTE PTR _cs[edi]
	mov	edi, DWORD PTR tv797[esp+96]
	shl	ecx, 8
	or	edx, ecx
	shl	edx, 8
	or	edx, eax
	movd	eax, mm0
	mov	DWORD PTR [edi], edx
	movq	mm0, mm2
	movsx	edx, BYTE PTR _cs[eax]
	movd	eax, mm0
	movsx	ecx, BYTE PTR _cs[eax]
	mov	eax, esi
	shr	eax, 24					; 00000018H
	and	eax, 63					; 0000003fH
	shr	esi, 10					; 0000000aH
	and	esi, 63					; 0000003fH
	movsx	eax, BYTE PTR _cs[eax]
	shl	eax, 8
; Line 130
	or	ecx, eax
	movsx	eax, BYTE PTR _cs[esi]
	shl	ecx, 8
	or	edx, ecx
	shl	edx, 8
	or	edx, eax
	mov	DWORD PTR [edi+4], edx
; Line 48
	mov	eax, DWORD PTR tv796[esp+96]
	add	edi, 16					; 00000010H
	add	eax, 12					; 0000000cH
	mov	DWORD PTR tv797[esp+96], edi
	sub	DWORD PTR _units$1$[esp+96], 1
	mov	DWORD PTR tv796[esp+96], eax
	jne	$LL4@base64_12n
$LN3@base64_12n:
; Line 134
	emms
; Line 135
	mov	eax, 1
; Line 136
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@base64_12n:
	pop	edi
	xor	eax, eax
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_base64_12n_encode ENDP
_TEXT	ENDS
END
